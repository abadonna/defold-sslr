

local function get_projection(self)
    return self.projection_fn(self.near, self.far, self.zoom)
end

local function delete_render_targets(self)
    if self.normal_target then
        render.delete_render_target(self.normal_target)
    end
    if self.depth_target then
        render.delete_render_target(self.depth_target)
    end
    if self.sslr_target then
        render.delete_render_target(self.sslr_target)
    end
    if self.color_target then
        render.delete_render_target(self.color_target)
    end
    self.color_target = nil
    self.sslr_target = nil
    self.depth_target = nil
    self.normal_target = nil
end

local function create_render_targets(self)
    delete_render_targets(self)

    local color_params = 
    { 
        format = render.FORMAT_RGBA,
        width = self.tex_width,
        height = self.tex_height,
        min_filter = render.FILTER_LINEAR,
        mag_filter = render.FILTER_LINEAR,
        u_wrap = render.WRAP_CLAMP_TO_EDGE,
        v_wrap = render.WRAP_CLAMP_TO_EDGE 
    }

    local depth_params = { 
        format = render.FORMAT_DEPTH,
        width =  self.tex_width,
        height =  self.tex_width,
        u_wrap = render.WRAP_CLAMP_TO_EDGE,
        v_wrap = render.WRAP_CLAMP_TO_EDGE 
    }

    
    if not pcall(
    function()
        self.normal_target = render.render_target("normal", {[render.BUFFER_COLOR_BIT] = color_params,  [render.BUFFER_DEPTH_BIT] = depth_params}) 
        self.depth_target = render.render_target("depth", {[render.BUFFER_COLOR_BIT] = color_params,  [render.BUFFER_DEPTH_BIT] = depth_params}) 
        self.sslr_target = render.render_target("sslr", {[render.BUFFER_COLOR_BIT] = color_params}) 
        self.color_target = render.render_target("color", {[render.BUFFER_COLOR_BIT] = color_params, [render.BUFFER_DEPTH_BIT] = depth_params}) 
    end) then
        delete_render_targets(self)
    end
end

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.model_pred = render.predicate({"model"})
    self.quad_pred = render.predicate({"quad"})
    
    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()

    self.near = 0.1
    self.far = 20.
  
    self.need_update = true

    self.cb = render.constant_buffer()
end

function update(self)
    if self.need_update then
        self.tex_width = render.get_window_width()
        self.tex_height = render.get_window_height()
        
        local aspect = self.tex_width / self.tex_height
        local fov = 0.7854
        local T = self.near * math.tan(0.5 * fov)
        local R = aspect * T
        self.cb.righttop = vmath.vector4(R, T, self.near, self.far)
        
        create_render_targets(self)
        self.need_update = false
    end
    
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

    render.set_viewport(0, 0, self.tex_width , self.tex_height)
    render.set_view(self.view)

    render.disable_state(render.STATE_STENCIL_TEST)
    render.disable_state(render.STATE_BLEND)
    render.enable_state(render.STATE_CULL_FACE)

    render.set_projection(get_projection(self))
    render.enable_state(render.STATE_DEPTH_TEST)

    render.set_render_target(self.normal_target)
    render.clear({[render.BUFFER_COLOR_BIT] = vmath.vector4(0), [render.BUFFER_DEPTH_BIT] = 1})
    render.enable_material("normal")
    render.draw(self.model_pred)
    render.disable_material()

    render.set_render_target(self.depth_target)
    render.clear({[render.BUFFER_COLOR_BIT] = vmath.vector4(0), [render.BUFFER_DEPTH_BIT] = 1})
    render.enable_material("depth")
    render.draw(self.model_pred)
    render.disable_material()
    

    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    
    render.set_render_target(self.color_target)
    render.clear({[render.BUFFER_COLOR_BIT] = vmath.vector4(0), [render.BUFFER_DEPTH_BIT] = 1})
    render.draw(self.model_pred)
    
    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)

    render.set_render_target(self.sslr_target)
        
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color})
    render.enable_texture(0, self.color_target, render.BUFFER_COLOR_BIT)
    render.enable_texture(1, self.normal_target, render.BUFFER_COLOR_BIT)
    render.enable_texture(2, self.depth_target, render.BUFFER_COLOR_BIT)
    render.draw(self.quad_pred, self.cb)

    render.set_render_target(render.RENDER_TARGET_DEFAULT)
    render.enable_texture(3, self.sslr_target, render.BUFFER_COLOR_BIT)
    render.clear({[render.BUFFER_COLOR_BIT] = vmath.vector4(0), [render.BUFFER_DEPTH_BIT] = 1})
    render.enable_material("deffered")
    render.draw(self.quad_pred, self.cb)
    render.disable_material()
    
    render.disable_texture(0)
    render.disable_texture(1)
    render.disable_texture(2)
    render.disable_texture(3)
    
    -- render GUI
    --
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("window_resized") then
        self.need_update = true
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
        self.projection = message.projection
    elseif message_id == hash("use_camera_projection") then
        self.projection_fn = function() return self.projection or vmath.matrix4() end
    elseif message_id == hash("use_stretch_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = stretch_projection
    elseif message_id == hash("use_fixed_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.zoom = message.zoom or 1
        self.projection_fn = fixed_projection
    elseif message_id == hash("use_fixed_fit_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = fixed_fit_projection
    end
end
